{"componentChunkName":"component---src-templates-post-template-js","path":"/tldr-google-cloud-bigtable/","result":{"data":{"site":{"siteMetadata":{"title":"Complex Codes"}},"markdownRemark":{"id":"557c09d4-a73d-5f49-8301-a9eaba8ab7f0","excerpt":"Bigtable is a distributed storage system developed internally by Google to handle petabyte-scale applications - like Google Maps and Google Analytics. In 2015 Bigtable was launched as a public service on Google Cloud. Similar to many other datastores, Bigtable uses a structure of rows and columns. Where it differs is in that Bigtable only allows for a single index - the row-key. Three primaryâ€¦","html":"<p>Bigtable is a distributed storage system developed internally by Google to handle petabyte-scale applications - like Google Maps and Google Analytics. In 2015 Bigtable was launched as a public service on Google Cloud.</p>\n<p>Similar to many other datastores, Bigtable uses a structure of rows and columns. Where it differs is in that Bigtable only allows for a single index - the row-key. Three primary operations exist:</p>\n<ul>\n<li><strong>Mutate</strong> - used to change the value connected to a row key and also for inserts.</li>\n<li><strong>Read</strong> - read the value of a single row key.</li>\n<li><strong>Range</strong> - read a range of row keys. Both filtering and aggregations are supported.</li>\n</ul>\n<p>To achieve scaling, Bigtable splits the data into <em>nodes</em>. Each <em>node</em> is a commodity server and stores a range of row keys. As a result, choosing the right key for your workload is crucial.</p>\n<p>For example, consider the example of storing a marketing event in Bigtable. The event looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"15d1369c-934e-11ea-bb37-0242ac130002\"</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"timestamp\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">,</span>\n  <span class=\"token property\">\"url\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"https://www.example.com/about\"</span>\n<span class=\"token punctuation\">}</span>```\n\nThere are three types of data here<span class=\"token operator\">:</span>\n\nRandom \n-------\n\nThe row key is random. Random data should not be the beginning if a low key in Bigquery because it makes range queries useless.\n\nTimestamp \n----------\n\nThe timestamp for the example is a long time ago<span class=\"token punctuation\">,</span> but when dealing with timestamps<span class=\"token punctuation\">,</span> it is essential to get them in the right format.\n\n<span class=\"token number\">2019</span>#<span class=\"token number\">12</span>#<span class=\"token number\">03</span>#<span class=\"token number\">14</span><span class=\"token operator\">:</span><span class=\"token number\">05</span><span class=\"token operator\">:</span><span class=\"token number\">12</span>\n\nURL \n----\n\nWe are reversing the most common.\n\nIn summary<span class=\"token punctuation\">,</span> Bigtable is a great datastore - if you are storing massive amounts of data. Otherwise<span class=\"token punctuation\">,</span> it's terrible.</code></pre></div>","frontmatter":{"title":"TL;DR - Google Cloud Bigtable","date":"May 09, 2020","description":"","draft":false}}},"pageContext":{"slug":"/tldr-google-cloud-bigtable/","previous":{"fields":{"slug":"/gallop-interfacing-with-a-database/"},"frontmatter":{"title":"Gallop Interfacing with a database"}},"next":{"fields":{"slug":"/gallop-an-analytics-database-written-in-rust/"},"frontmatter":{"title":"Gallop An analytics database written in Rust"}}}}}