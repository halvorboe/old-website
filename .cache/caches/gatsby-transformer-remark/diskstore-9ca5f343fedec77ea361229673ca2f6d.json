{"expireTime":9007200843920344000,"key":"transformer-remark-markdown-html-f879fe1facaae5be8f03931a344d394d-gatsby-remark-imagesgatsby-remark-responsive-iframegatsby-remark-prismjsgatsby-remark-copy-linked-filesgatsby-remark-smartypants-","val":"<p>Most people use Google every day - yet almost nobody understands how it works. In this article, we will try to scratch the surface of how searching in text works. To be clear, I have no idea how Google search functions. So, this article attempts to explain something I do not fully understand.</p>\n<p>Before we get started let us define the atomic part in any search system, the document. At document is a collection of text that you want to find if you loose it.</p>\n<p>To find the document there are many versions. Sometimes you want</p>\n<p>… Define document and what queries make sense …</p>\n<h1>What solutions exist?</h1>\n<h2>Lucene</h2>\n<p>Lucene is an open source library for indexing.</p>\n<h2>Tantivy</h2>\n<p>A really cool alternative in Rust.</p>\n<h1>So why have I never heard about Lucene?</h1>\n<p>Lucene is not a database. It is only a datastructure. It needs a system around it to be useful. In the case of Lucene that is ElasticSearch.</p>\n<p>What ElasticSearch does is distributing these indexes across multiple nodes.</p>\n<p>There are two main ways of scaling:</p>\n<p><strong>Replication:</strong> If you need to scale reads, repliating the same data accross multiple nodes might help.</p>\n<p><strong>Sharding:</strong> Smaller shards means that you can spread the write load onto more nodes.</p>\n<h1>Google search works?</h1>\n<p>When you search in google you are writing a query in the same way you would to a SQL database.</p>\n<p>… insert stuff that is cool …</p>\n<p>The same thing goes for Lucene and Tantivy.</p>\n<h1>What if I don’t care about the single documents?</h1>\n<p>This is where stuff gets really hard. Let’s say you want to know how many websites contain the work “bob”. That is hard.</p>\n<p>This made no sense but I’ll revise it. Good times…</p>"}